M0=${M0:=/mnt/glusterfs/0};   # 0th mount point for FUSE
M1=${M1:=/mnt/glusterfs/1};   # 1st mount point for FUSE
M2=${M2:=/mnt/glusterfs/2};   # 2nd mount point for FUSE
N0=${N0:=/mnt/nfs/0};         # 0th mount point for NFS
N1=${N1:=/mnt/nfs/1};         # 1st mount point for NFS
V0=${V0:=patchy};             # volume name to use in tests
V1=${V1:=patchy1};            # volume name to use in tests
B0=${B0:=/d/backends};        # top level of brick directories
H0=${H0:=`hostname --fqdn`};  # hostname
DEBUG=${DEBUG:=0}             # turn on debugging?
CC=cc
OSTYPE=$(uname -s)

ENV_RC=$(dirname $0)/../env.rc
if [ ! -f $ENV_RC ]; then
   ENV_RC=$(dirname $0)/../../env.rc
fi

if [ ! -f $ENV_RC ]; then
   echo "Aborting."
   echo
   echo "env.rc not found"
   echo
   echo "Please correct the problem and try again."
   echo
   exit 1
fi
. $ENV_RC

PROCESS_UP_TIMEOUT=20
NFS_EXPORT_TIMEOUT=20
CHILD_UP_TIMEOUT=20
PROBE_TIMEOUT=20
REBALANCE_TIMEOUT=120
REOPEN_TIMEOUT=20
HEAL_TIMEOUT=60
MARKER_UPDATE_TIMEOUT=20
JANITOR_TIMEOUT=60
UMOUNT_TIMEOUT=5

statedumpdir=`gluster --print-statedumpdir`; # Default directory for statedump

CLI="gluster --mode=script --wignore";
GFS="glusterfs --attribute-timeout=0 --entry-timeout=0";

mkdir -p $B0;
mkdir -p $M0 $M1;
mkdir -p $N0 $N1;

testcnt=`egrep '^[[:space:]]*(EXPECT|EXPECT_NOT|TEST|EXPECT_WITHIN|EXPECT_KEYWORD)[[:space:]]' $0 | wc -l`
expect_tests=`egrep '^[[:space:]]*TESTS_EXPECTED_IN_LOOP[[:space:]]*' $0`

x_ifs=$IFS
IFS=$'\n'
for line in $expect_tests; do
	expect_tests=`echo $line | cut -f 2 -d =`
	testcnt=`expr $testcnt + $expect_tests`
done
IFS=$x_ifs

echo 1..$testcnt

t=1

function dbg()
{
	[ "x$DEBUG" = "x0" ] || echo "$*" >&2;
}


function test_header()
{
	dbg "=========================";
	dbg "TEST $t (line $TESTLINE): $*";
	saved_cmd="$*"
}


function test_footer()
{
	RET=$?
        local err=$1

	if [ $RET -eq 0 ]; then
	     	echo "ok $t";
	else
                echo "not ok $t $err";
		# With DEBUG, this was already printed out, so skip it.
		if [ x"$DEBUG" = x"0" ]; then
			echo "FAILED COMMAND: $saved_cmd"
		fi
		if [ "$EXIT_EARLY" = "1" ]; then
			exit $RET
		fi
	fi

	dbg "RESULT $t: $RET";

	t=`expr $t + 1`;
}

function test_expect_footer()
{
        local e=$1
        local a=$2
        local err=""

        if ! [[ "$a" =~ $e ]]; then
                err="Got \"$a\" instead of \"$e\""
        fi
        [[ "$a" =~ $e ]];

        test_footer "$err";
}

function _EXPECT()
{
	TESTLINE=$1;
	shift;
        local a=""

	test_header "$@";

	e="$1";
	shift;
	a=$("$@" | tail -1)

	test_expect_footer "$e" "$a";
}

function test_expect_not_footer()
{
        local e=$1
        local a=$2
        local err=""

        if [[ "$a" =~ $e ]]; then
                err="Got \"$a\" when not expecting it"
        fi

        ! [[ "$a" =~ "$e" ]];
        test_footer "$err";
}

function _EXPECT_NOT()
{
	TESTLINE=$1;
	shift;
        local a=""

	test_header "$@";

	e="$1";
	shift;
	a=$("$@" | tail -1)

	test_expect_not_footer "$e" "$a";
}

function _EXPECT_KEYWORD()
{
	TESTLINE=$1;
	shift;

	test_header "$@";

	e="$1";
	shift;
	"$@" | tail -1 | grep -q "$e"

	test_footer;
}


function _TEST()
{
	TESTLINE=$1;
	shift;
        local redirect=""

	test_header "$@";

        if [ "$1" = "!" ]; then
                redirect="2>&1"
        fi

	eval "$@" >/dev/null $redirect

	test_footer;
}

function _EXPECT_WITHIN()
{
        TESTLINE=$1
        shift;

        local timeout=$1
        shift;

        test_header "$@"

        e=$1;
        a="";
        shift;

        local endtime=$(( ${timeout}+`date +%s` ))

        while [ `date +%s` -lt $endtime ]; do
                a=$("$@" | tail -1 ; exit ${PIPESTATUS[0]})
                ## Check command success
                if [ $? -ne 0 ]; then
                        break;
                fi

                ## Check match success
                if [[ "$a" =~ "$e" ]]; then
                        break;
                fi
                sleep 1;
        done

        test_expect_footer "$e" "$a";
}


function SKIP_TESTS()
{
        dbg "Skipping tests $t-$testcnt";
        while [ $t -le $testcnt ]; do
                true ; test_footer;
        done
}


function _TEST_IN_LOOP()
{
	testcnt=`expr $testcnt + 1`;
	_TEST $@
}


function cleanup()
{
        killall -15 glusterfs glusterfsd glusterd 2>/dev/null || true;
        # allow completion of signal handlers for SIGTERM before issue SIGKILL
        sleep 1
        killall -9 glusterfs glusterfsd glusterd 2>/dev/null || true;

        MOUNTPOINTS=`mount | grep "$B0/" | awk '{print $3}'`
        for m in $MOUNTPOINTS;
        do
                umount $m
        done

        # unregister nfs and related services from portmapper/rpcbind
        ## nfs
        rpcinfo -d 100003 3
        ## mountd
        rpcinfo -d 100005 1
        rpcinfo -d 100005 3
        ## nlockmgr
        rpcinfo -d 100021 1
        rpcinfo -d 100021 4
        ## nfs_acl
        rpcinfo -d 100227 3

        type cleanup_lvm &>/dev/null && cleanup_lvm

        LOOPDEVICES=`losetup -a | grep "$B0/" | awk '{print $1}' | tr -d :`
        for l in $LOOPDEVICES;
        do
                losetup -d $l
        done

        if [ -n "${GLUSTERD_WORKDIR}" ] ; then
            rm -rf $GLUSTERD_WORKDIR/* $B0/* /etc/glusterd/*;
        fi

        # unmount all stale mounts from /tmp, This is a temporary work around
        # till the stale mount in /tmp is found.
        case `uname -s` in
        Linux)
                flag="-l"
                ;;
        NetBSD|FreeBSD|Darwin)
                flag="-f"
                ;;
        *)
                flag=""
                ;;
        esac
        umount $flag /tmp/mnt* 2>/dev/null
        umount $flag $M0 2>/dev/null || umount -f $M0 2>/dev/null || true;
        umount $flag $M1 2>/dev/null || umount -f $M1 2>/dev/null || true;
        umount $flag $N0 2>/dev/null || umount -f $N0 2>/dev/null || true;
        umount $flag $N1 2>/dev/null || umount -f $N1 2>/dev/null || true;

}

function volinfo_field()
{
    local vol=$1;
    local field=$2;

    $CLI volume info $vol | grep "^$field: " | sed 's/.*: //';
}

function cleanup_tester ()
{
    local exe=$1
    rm -f $exe
}

function build_tester ()
{
    local cfile=$1
    local fname=$(basename "$cfile")
    local ext="${fname##*.}"
    local execname="${fname%.*}"
    gcc -g -o $(dirname $cfile)/$execname $cfile
}

function process_leak_count ()
{
    local pid=$1;
    return $(ls -lh /proc/$pid/fd | grep "(deleted)"| wc -l)
}

function STAT()
{
        stat $1
        echo $?
}

alias EXPECT='_EXPECT $LINENO'
alias EXPECT_NOT='_EXPECT_NOT $LINENO'
alias TEST='_TEST $LINENO'
alias EXPECT_WITHIN='_EXPECT_WITHIN $LINENO'
alias EXPECT_KEYWORD='_EXPECT_KEYWORD $LINENO'
alias TEST_IN_LOOP='_TEST_IN_LOOP $LINENO'
shopt -s expand_aliases

if [ x"$OSTYPE" = x"Linux" ]; then
	alias dd="dd status=none"
elif [ x"$OSTYPE" = x"NetBSD" ]; then
	alias dd="dd msgfmt=quiet"
fi
# MacOS doesn't seem to support either option.  Doing nothing at all is
# probably the safest option there and on anything we don't recognize, but
# if you want to reduce the noise level and know the correct option for
# your favorite platform please feel free to add it here.
